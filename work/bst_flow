Set up a classic environment for a c++ program.

Create a class for the nodes - constructor & destructor.

Create a class for the bst.
Methods:
print the tree
test if the data is present
insert data
get the min
get the max
delete data
convert to a linked list (we will need a class Pair)

Problems on leetcode:
700
938
98
108

Copy Paste this main and test!
int main(){

	std::cout<<"Working on bst"<<std::endl;

	BST b;

	b.insertData(10);
	b.insertData(5);
	b.insertData(20);
	b.insertData(7);
	b.insertData(3);
	b.insertData(15);
	b.insertData(100);
	b.insertData(1);
	b.insertData(150);

	b.print();

	std::cout<<std::endl;

	std::cout<<"Has data ..."<<std::endl;
	std::cout<<"Has 100? "<<std::endl;
	std::cout<<b.hasData(100)<<std::endl;
	std::cout<<"Has 15? "<<std::endl;
	std::cout<<b.hasData(15)<<std::endl;

	std::cout<<std::endl;

	std::cout<<"Min / Max values"<<std::endl;
	std::cout<<"Min: "<<std::endl;
	std::cout<<b.minV()<<std::endl;
	std::cout<<"Max: "<<std::endl;
	std::cout<<b.maxV()<<std::endl;

	std::cout<<std::endl;

	std::cout<<"Deletion of 20"<<std::endl;

	b.deleteData(20);

	b.print();

	std::cout<<std::endl;

	std::cout<<"BST to linked list"<<std::endl;

	BTNode<int>* head = b.convertToLL();
	BTNode<int>* tmp = head;

	while(tmp){
		std::cout<<tmp->data<<"-> ";
		tmp = tmp->right;
	}

	std::cout<<"END"<<std::endl;

	return 0;
}
