// #include <iostream>
// #include <unordered_map>
// #include <map>
// #include <string>
// #include <vector>

// //Mini interface with inbuilt hashmaps

// bool isPresent(std::unordered_map<std::string, int> u_map, std::string key){

// }

// void isPresentInterface(std::unordered_map<std::string, int> u_map, std::string key){

// }

// void givingSize(std::unordered_map<std::string, int> u_map){

// }

// void updatingHashMap(std::unordered_map<std::string, int> u_map, std::string key, int value){

// }

// void erasingValues(std::unordered_map<std::string, int> u_map, std::string key){

// }

// void usageInbuiltHashMap(){

// 	std::cout<<"======= Inbuilt hashmaps : unordered_map ======"<<std::endl;

// 	//insert needs pair data structure.

// 	//we can use also [] as arrays & vectors

// 	//xyz not present, if we ask with .at we will have an exception if we ask
// 	//with [] we will have 0 value and the key will be added.
// 	// std::cout<<key2<<" : "<<myMap.at(key2)<<std::endl;

// 	//checking if a key is present

// 	isPresentInterface(myMap, key3);
// 	isPresentInterface(myMap, key2);

// 	//updating values
// 	givingSize(myMap);

// 	updatingHashMap(myMap, key2, 20);
// 	updatingHashMap(myMap, "xcv", 20);

// 	myMap.erase(key2);
// 	givingSize(myMap);
// 	isPresentInterface(myMap, key2);

// }

// //Remove duplicates algorithm

// std::vector<int> removeDuplicates(int* arr, int size){
// 	std::vector<int> ans;

// 	return ans;

// }

// void removeDuplicates(){
// 	std::cout<<"====== Remove duplicates algorithm ======"<<std::endl;
// 	int a[] = {1, 2, 4, 5, 6, 1, 1, 2, 3, 3, 2, 5, 6, 6, 1};
// 	std::vector<int> ans = removeDuplicates(a, 15);
// 	for (int i = 0 ; i<ans.size(); i++){
// 		std::cout<<ans[i]<<" ";
// 	}
// 	std::cout<<std::endl;
// }

// //Iterators
// void iteratorsUMap(){
// 	std::cout<<"====== Iterators with unordered_map ======"<<std::endl;
// 	std::unordered_map<std::string, int> myMap;
// 	myMap["abc"] = 1;
// 	myMap["abc1"] = -23;
// 	myMap["abc2"] = 190;
// 	myMap["abc3"] = 11;
// 	myMap["abc4"] = 5;

// 	//Usage of iterator

// 	//Find & erase with iterator

// 	std::string key = "abc1";

// 	std::cout<<"Is present with iterators."<<std::endl;
// 	//Find with iterator
// 	if (){
// 		std::cout<<key<<" not present."<<std::endl;
// 	}

// 	else{
// 		std::cout<<key<<" is present."<<std::endl;
// 		std::cout<<key<<" : "<<myMap[key]<<std::endl;
// 	}

// 	//Erase all the u_map

// 	//Usage of iterator

// 	givingSize(myMap);
// }

// void iteratorsMap(){

// 	std::cout<<"====== Iterators with map ======"<<std::endl;
// 	std::map<std::string, int> myMap1;
// 	myMap1["abc"] = 1;
// 	myMap1["abc1"] = -23;
// 	myMap1["abc2"] = 190;
// 	myMap1["abc3"] = 11;
// 	myMap1["abc4"] = 5;

// 	//Usage of iterator
// }

// void iteratorsVector(){

// 	std::cout<<"====== Iterators with vectors ======"<<std::endl;
// 	std::vector<int> vec;
// 	vec.push_back(10);
// 	vec.push_back(34);
// 	vec.push_back(31);
// 	vec.push_back(90);
// 	vec.push_back(-109);

// 	//Usage of iterator
// }

// void iterators(){
// 	std::cout<<"====== Iterators with unordered_map / map / vectors ======"<<std::endl;

// 	iteratorsUMap();
// 	iteratorsMap();
// 	iteratorsVector();

// }

// void autoKeyWord(){

// 	//Auto key word:
// 	// auto iterator it1;
// 	// std::map<std::string, int>::iterator it1;
// 	// Good but need to be used with parcimony
// 	auto test = 12;
// 	std::cout<<test<<std::endl;

// }

// //Implementing our hashmap

// template <class T>
// class MapNode{

// 	//Constructor & Destructor

// };

// template <class T>
// class MyMap{

// 	int getBucketIndex(std::string key){

// 	}

// 	void rehash(){

// 	}

// 	//Constructor & Destructor

// 	int size(){

// 	}

// 	T getValue(std::string key){

// 	}

// 	void insert(std::string key, T value){

// 	}

// 	T remove(std::string key){

// 	}

// 	double getLoadFactor(){

// 	}

// };

// void testingMyMapClass(){
// 	std::cout<<"====== MyMap class testing ======"<<std::endl;

// 	MyMap<int> ourMap;

// 	for (int i = 0; i<10; i++){
// 		char c = '0'+i;
// 		std::string key = "abc";
// 		key += c;
// 		int value = i+1;
// 		ourMap.insert(key, value);
// 		std::cout<<"current load factor: "<<ourMap.getLoadFactor()<<std::endl;
// 	}

// 	for (int i = 0; i<10; i++){
// 		char c = '0'+i;
// 		std::string key = "abc";
// 		key += c;

// 		std::cout<<key<<" : "<<ourMap.getValue(key)<<std::endl;
// 	}

// 	std::cout<<"Size : "<<ourMap.size()<<std::endl;
// 	std::cout<<"Removing abc1 & abc6"<<std::endl;
// 	ourMap.remove("abc1");
// 	ourMap.remove("abc6");

// 	for (int i = 0; i<10; i++){
// 		char c = '0'+i;
// 		std::string key = "abc";
// 		key += c;

// 		std::cout<<key<<" : "<<ourMap.getValue(key)<<std::endl;
// 	}

// 	std::cout<<"Size : "<<ourMap.size()<<std::endl;

// }

// int main(){

// 	std::cout<<"Training with hashmaps..."<<std::endl;
// 	usageInbuiltHashMap();
// 	removeDuplicates();
// 	iterators();
// 	autoKeyWord();
// 	testingMyMapClass();

// 	return 0;
// }
